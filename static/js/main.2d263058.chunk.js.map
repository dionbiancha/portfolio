{"version":3,"sources":["images/linkedin.svg","images/github.svg","images/darkMode.svg","images/photo.png","images/moreGray.svg","images/moreBlue.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","leftOnAnimation","document","getElementById","style","marginLeft","transitionDuration","opacity","width","leftOffAnimation","className","id","onMouseEnter","this","onMouseLeave","src","photo","alt","moreGray","moreBlue","linkedin","darkMode","github","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,0RCyF5BC,G,kNA9EbC,gBAAkB,WAChBC,SAASC,eAAe,SAASC,MAAMC,WAAa,OACpDH,SAASC,eAAe,SAASC,MAAME,mBAAqB,KAC5DJ,SAASC,eAAe,aAAaC,MAAMG,QAAU,IACrDL,SAASC,eAAe,aAAaC,MAAMC,WAAa,MACxDH,SAASC,eAAe,kBAAkBC,MAAMC,WAAa,MAC7DH,SAASC,eAAe,aAAaC,MAAME,mBAAqB,KAChEJ,SAASC,eAAe,aAAaC,MAAMC,WAAa,QACxDH,SAASC,eAAe,aAAaC,MAAME,mBAAqB,KAChEJ,SAASC,eAAe,QAAQC,MAAMI,MAAQ,MAC9CN,SAASC,eAAe,QAAQC,MAAME,mBAAqB,KAC3DJ,SAASC,eAAe,YAAYC,MAAME,mBAAqB,KAC/DJ,SAASC,eAAe,YAAYC,MAAMI,MAAQ,O,EAEpDC,iBAAmB,WACjBP,SAASC,eAAe,SAASC,MAAMC,WAAa,QACpDH,SAASC,eAAe,SAASC,MAAME,mBAAqB,KAC5DJ,SAASC,eAAe,aAAaC,MAAMG,QAAU,IACrDL,SAASC,eAAe,aAAaC,MAAMC,WAAa,OACxDH,SAASC,eAAe,kBAAkBC,MAAMC,WAAa,OAC7DH,SAASC,eAAe,aAAaC,MAAME,mBAAqB,KAChEJ,SAASC,eAAe,aAAaC,MAAMC,WAAa,OACxDH,SAASC,eAAe,aAAaC,MAAME,mBAAqB,KAChEJ,SAASC,eAAe,QAAQC,MAAMI,MAAQ,MAC9CN,SAASC,eAAe,QAAQC,MAAME,mBAAqB,KAC3DJ,SAASC,eAAe,YAAYC,MAAME,mBAAqB,KAC/DJ,SAASC,eAAe,YAAYC,MAAMI,MAAQ,O,uDAIlD,OACE,yBAAKE,UAAU,aACb,yBAAKA,UAAU,WACb,yBAAKC,GAAG,OAAOD,UAAU,0BACvB,yBAAKA,UAAU,iBACbE,aAAcC,KAAKZ,gBACnBa,aAAcD,KAAKJ,kBAEnB,yBAAKE,GAAG,QAAQD,UAAU,QAAQK,IAAKC,IAAOC,IAAI,UAClD,yBAAKN,GAAG,YAAYD,UAAU,YAAYK,IAAKG,IAAUD,IAAI,SAC7D,yBAAKN,GAAG,iBAAiBD,UAAU,OAAOK,IAAKI,IAAUF,IAAI,UAE/D,yBAAKN,GAAG,YAAYD,UAAU,kBAC5B,kDACA,2BACE,uCAEF,2BACE,4CAGJ,yBAAKC,GAAG,WAAWD,UAAU,mBAC3B,yBAAKA,UAAU,cAAcK,IAAKK,IAAUH,IAAI,eAGpD,yBAAKP,UAAU,2BACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,iBAAiBK,IAAKM,IAAUJ,IAAI,cAErD,yBAAKP,UAAU,kBACb,yCACA,2BACE,gDAEF,2BACE,oDAGJ,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,cAAcK,IAAKO,IAAQL,IAAI,mB,GAvE1CM,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAASC,eAAe,SDyHpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2d263058.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/linkedin.30351523.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.88a74c37.svg\";","module.exports = __webpack_public_path__ + \"static/media/darkMode.79fccbe4.svg\";","module.exports = __webpack_public_path__ + \"static/media/photo.f9061584.png\";","module.exports = __webpack_public_path__ + \"static/media/moreGray.e6f4311b.svg\";","module.exports = __webpack_public_path__ + \"static/media/moreBlue.710c7fb4.svg\";","import React, { Component } from 'react';\r\nimport linkedin from './images/linkedin.svg';\r\nimport github from './images/github.svg';\r\nimport darkMode from './images/darkMode.svg';\r\nimport photo from './images/photo.png';\r\nimport moreGray from './images/moreGray.svg';\r\nimport moreBlue from './images/moreBlue.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  leftOnAnimation = () => {\r\n    document.getElementById(\"Photo\").style.marginLeft = '15px';\r\n    document.getElementById(\"Photo\").style.transitionDuration = '1s';\r\n    document.getElementById(\"More-left\").style.opacity = '1';\r\n    document.getElementById(\"More-left\").style.marginLeft = '85%';\r\n    document.getElementById(\"More-left-blue\").style.marginLeft = '85%';\r\n    document.getElementById(\"More-left\").style.transitionDuration = '1s';\r\n    document.getElementById(\"Text-left\").style.marginLeft = '280px';\r\n    document.getElementById(\"Text-left\").style.transitionDuration = '1s';\r\n    document.getElementById(\"Left\").style.width = '70%';\r\n    document.getElementById(\"Left\").style.transitionDuration = '1s';\r\n    document.getElementById(\"Linkedin\").style.transitionDuration = '1s';\r\n    document.getElementById(\"Linkedin\").style.width = '58%';\r\n  }\r\n  leftOffAnimation = () => {\r\n    document.getElementById(\"Photo\").style.marginLeft = '-150%';\r\n    document.getElementById(\"Photo\").style.transitionDuration = '1s';\r\n    document.getElementById(\"More-left\").style.opacity = '0';\r\n    document.getElementById(\"More-left\").style.marginLeft = '-40%';\r\n    document.getElementById(\"More-left-blue\").style.marginLeft = '-40%';\r\n    document.getElementById(\"More-left\").style.transitionDuration = '1s';\r\n    document.getElementById(\"Text-left\").style.marginLeft = '60px';\r\n    document.getElementById(\"Text-left\").style.transitionDuration = '1s';\r\n    document.getElementById(\"Left\").style.width = '50%';\r\n    document.getElementById(\"Left\").style.transitionDuration = '1s';\r\n    document.getElementById(\"Linkedin\").style.transitionDuration = '1s';\r\n    document.getElementById(\"Linkedin\").style.width = '50%';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Container\">\r\n        <div className=\"Flexbox\">\r\n          <div id=\"Left\" className=\"Left Content-container\">\r\n            <div className=\"Left-animation\" \r\n              onMouseEnter={this.leftOnAnimation}\r\n              onMouseLeave={this.leftOffAnimation}\r\n            >\r\n              <img id=\"Photo\" className=\"Photo\" src={photo} alt=\"Photo\" />\r\n              <img id=\"More-left\" className=\"More-left\" src={moreGray} alt=\"More\"/>\r\n              <img id=\"More-left-blue\" className=\"Blue\" src={moreBlue} alt=\"More\" />\r\n            </div>\r\n            <div id=\"Text-left\" className=\"Text-container\">\r\n              <p>Ol√°, eu me chamo</p>\r\n              <p>\r\n                <h1>Dionei</h1>\r\n              </p>\r\n              <p>\r\n                <h1>Bianchati.</h1>\r\n              </p>\r\n            </div>\r\n            <div id=\"Linkedin\" className=\"Social Linkedin\">\r\n              <img className=\"Social-icon\" src={linkedin} alt=\"linkedin\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"Right Content-container\">\r\n            <div className=\"Dark-mode\">\r\n              <img className=\"Dark-mode-icon\" src={darkMode} alt=\"darkMode\" />\r\n            </div>\r\n            <div className=\"Text-container\">\r\n              <h1>Portfolio</h1>\r\n              <p>\r\n                <h3>Alguns dos meus</h3>\r\n              </p>\r\n              <p>\r\n                <h3>melhores trabalhos</h3>\r\n              </p>\r\n            </div>\r\n            <div className=\"Social Github\">\r\n              <img className=\"Social-icon\" src={github} alt=\"github\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}